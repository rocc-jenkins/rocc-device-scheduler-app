pipeline
{
    environment 
      {
        https_proxy='http://apac.zscaler.philips.com:9480'
        http_proxy='http://apac.zscaler.philips.com:9480'
        git_token = credentials('rocctoken')
        functionalaccountpassword = credentials('functionalaccountpassword')
        CF_USERNAME = credentials('HSDPCREDS')
        docker_registry='docker.na1.hsdp.io'
        CF_API = credentials('ROCC_CF_API')
        CF_ORG = credentials('ROCC_CF_ORG')
        CF_DEV_SPACE = credentials('ROCC_CF_DEV_SPACE')
        SONAR_CREDS = credentials('sonar_creds')
	CF_DOMAIN = credentials('ROCC_CF_DOMAIN')
	GITHUB_PR_NUMBER = "${GITHUB_PR_NUMBER}"
	reponame = 'rocc-device-scheduler-app'
	
    }

    options 
              {
        disableConcurrentBuilds()
        timestamps()
              }
                
    agent { label '130.147.168.250' }
    
    stages 
    {
        stage('Git-Clone') 
                  {
            steps 
            {
                checkout([$class: 'GitSCM', branches: [[name: '${GITHUB_PR_HEAD_SHA}']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'WipeWorkspace']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitcredswithPAT', refspec: '+refs/pull/*:refs/remotes/origin/pr/*', url: 'https://github.com/analytical-informatics/rocc-device-scheduler-app']]])
            }
        }
        stage('Build')
        {
            steps 
            {
                 sh '''#!/bin/bash
                   echo $GITHUB_PR_NUMBER
                   cd ${WORKSPACE}/build
                   source /etc/environment
	           export ROCC_DEV="true"
                   bash build-rocc-self-service-app.sh
		  '''
            } 
        }
	stage('Run-Lint')
        {
            steps 
            {
                script
                {
                    try 
                    {  
                        sh '''#!/bin/bash
		         source /etc/environment
                         cd ${WORKSPACE}/client;
                         npm run lint > ${WORKSPACE}/ESLINT.txt
                         if  [ $? == "1" ] ; then
                         warningcount=`(tail -2 ${WORKSPACE}/ESLINT.txt | head -1)`
                         curl -k -X POST -H "Authorization: token $git_token" https://api.github.com/repos/analytical-informatics/$reponame/issues/$GITHUB_PR_NUMBER/comments -d '{"body":" ESlint Results '"$warningcount"' "}'
                         else
                         curl -k -X POST -H "Authorization: token $git_token" https://api.github.com/repos/analytical-informatics/$reponame/issues/$GITHUB_PR_NUMBER/comments -d '{"body":" ESLint Results 0 Errors 0 Warnings"}'
                         fi
			 '''
                    }
                    finally 
                    {
                        sh '''#!/bin/bash
			set -e
			source /etc/environment
			cd ${WORKSPACE}/client;
			npm run lint
                        '''						
                    }
                }
            } 
        }
        stage('Run-Test-cases')
        {
            steps 
            {
                 sh '''#!/bin/bash
		 set -e
		 set -x
		 cd ${WORKSPACE}/client;
	         source /etc/environment
                 npm run test:coverage
		 '''
            } 
        }           
        stage('Checkout-CIScripts')
        {
            steps 
            {
                sh 'mkdir CI_Scripts'
                checkout([$class: 'GitSCM', branches: [[name: '*/pipeline']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'CI_Scripts']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitcredswithPAT', url: 'https://github.com/analytical-informatics/devops-ci-scripts.git']]])
            }
        }
	stage('Sonar-Scan')	
        { 	
            steps 	
            {	
             sh '''	
             cd ${WORKSPACE}	
             export PATH=$PATH:/home/jenkins/node-v10.15.2-linux-x64/bin	
             /opt/sonar-scanner-3.2.0.1227-linux/bin/sonar-scanner -Dsonar.projectKey=${GITHUB_PR_NUMBER}_$reponame -Dsonar.projectName=${GITHUB_PR_NUMBER}_$reponame -Dsonar.sources=. -Dsonar.profile=ROCC -Dsonar.sourceEncoding=UTF-8 -Dsonar.exclusions=**/node_modules/**,**/*.spec.ts,**/alltypes.d.ts,**/config/**,**/build/**,**/scripts/**,**/config/**,**/docker/**,**/server/dist/**,**/coverage/** -Dsonar.test.inclusions=**/*.test.tsx -Dsonar.ts.tslintconfigpath=tslint.json -Dsonar.javascript.lcov.reportPaths=client/coverage/lcov.info -Dsonar.typescript.exclusions=**/node_modules/**,**/alltypes.d.ts,**/config/**,**/build/**,**/scripts/**,**/config/** -Dsonar.host.url=https://sonarqube-pic.ta.philips.com/sonar/ -Dsonar.login=$SONAR_CREDS_USR -Dsonar.password=$SONAR_CREDS_PSW
              '''	
	     }  
			
	}
	 stage('Sonar-Publish')	
                  {	
            steps 	
            {	
                sh '''	
                cd ${WORKSPACE}	
                bash CI_Scripts/sonarpublish.sh $reponame $reponame $git_token $reponame-pr
                '''	
            }	
        }	
        stage('Sonar-Gate')	
        {	
            steps 	
            {	
                sh '''	
                cd ${WORKSPACE}	
                bash CI_Scripts/sonar-check-pr.sh $reponame Pipeline-PR/$reponame $reponame $git_token
                '''	
            }	
        }
        stage('Fortify-Scan') 
        {
            steps 
            {
                sh '''
                cd ${WORKSPACE}
                #bash CI_Scripts/fortifyscan.sh rocc-GATED $reponame $git_token
                '''
            }
        }
        
        stage('Fortify-Gate')
        {
            steps 
            {
                sh '''
                cd ${WORKSPACE}
                #pass functionalaccountpassed, fortify pjt version, jenkinsprjob, reponame, gittoken as variable
                #bash CI_Scripts/fortifygatescript.sh Pipeline-PR/rocc-pr $reponame $git_token $functionalaccountpassword 12947
                '''
            }
        }
        stage('Build-Docker')
        {
            steps
            {
                sh '''
                cd ${WORKSPACE}/docker
                bash ${WORKSPACE}/CI_Scripts/dockerbuild.sh $reponame
                '''
            }
        }
        stage('Deploy-Service-On-HSDP')
        {
            steps
            {
                sh '''
		export CF_DOCKER_PASSWORD=$CF_USERNAME_PSW
                cd ${WORKSPACE}/docker
		sed -i 's,CONSOLE_SERVICES_URL: https://161.85.20.219:8443/philips/rocc,CONSOLE_SERVICES_URL: https://130.147.138.110:8446/philips/rocc,g'  manifest.yaml
                cf login -a $CF_API -u $CF_USERNAME_USR  -p $CF_USERNAME_PSW -o $CF_ORG -s $CF_DEV_SPACE
                cf delete rocc-pull-jenkins-"${GITHUB_PR_NUMBER}" -f
                CF_DOCKER_PASSWORD=$CF_USERNAME_PSW cf push $reponame-"${GITHUB_PR_NUMBER}" --docker-image docker.na1.hsdp.io/client-radiologysolutions-performancebridge_rocc-dev/philips/$reponame:"${GITHUB_PR_NUMBER}" --docker-username "$CF_USERNAME_USR" -f manifest.yaml
                cf bind-service $reponame-"${GITHUB_PR_NUMBER}" rocc-redis-dev
                cf restage $reponame-"${GITHUB_PR_NUMBER}"
		commit_url=$(curl -s -X GET -k 'https://api.github.com/repos/analytical-informatics/$reponame/commits/'"$GITHUB_PR_HEAD_SHA"'?access_token='"$git_token"'&' | jq -r '.html_url') ||true
                echo $commit_url
                curl -X POST -k -H 'Authorization: token '"$git_token"'' -i 'https://api.github.com/repos/analytical-informatics/$reponame/issues/'"${GITHUB_PR_NUMBER}"'/comments' --data '{"body": "Review app for jenkins commit '"${commit_url}"' is deployed to CF is https://$reponame-'"${GITHUB_PR_NUMBER}"''"$CF_DOMAIN"' "}' ||true

		 '''
            }
        }
    }
     post {
        always {
                 script {
                            sh '''#!/bin/bash
                             bash CI_Scripts/git-tfs-traceability.sh
                             '''
                       }
                }
           success {
            sh '''
	    curl "https://api.github.com/repos/analytical-informatics/$reponame/statuses/$GITHUB_PR_HEAD_SHA?access_token=$git_token" -H "Content-Type: application/json" -X POST -d '{\"state\": \"success\",\"context\": \"CIBUILD\",\"description\": \"ALL CHECKS PASSED\",\"target_url\": \"'$BUILD_URL'\"}'
	     '''
              }
	failure {
           sh '''
	   curl "https://api.github.com/repos/analytical-informatics/$reponame/statuses/$GITHUB_PR_HEAD_SHA?access_token=$git_token" -H "Content-Type: application/json" -X POST -d '{\"state\": \"failure\",\"context\": \"CIBUILD\",\"description\": \"API CHECKS FAILED\",\"target_url\": \"'$BUILD_URL'\"}'
	    '''
              }
     }
}
